// Code generated by hertz generator.

package handler

import (
	"context"
	"errors"
	"fmt"
	"github.com/cloudwego/hertz/pkg/protocol"
	log "github.com/sirupsen/logrus"
	"hz_demo/biz/model"
	"strconv"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	grom "gorm.io/gorm"
)

const (
	IMAGE_URL_404    = "https://img-blog.csdnimg.cn/img_convert/2ed0d7af40095c21456bab6acb841675.png"
	RETURN_DOC_LIMIT = 20
	COOKIE_KRY       = "user_login"
)

var db *grom.DB

func init() {
	dsn := "root:123456@tcp(127.0.0.1:12001)/hertz_demo?charset=utf8mb4&parseTime=True&loc=Local"
	if dbp, err := gorm.Open(mysql.Open(dsn), &gorm.Config{}); err == nil {
		db = dbp
	} else {
		hlog.Errorf("open mysql db error")
	}
	LoginCachePtr = NewLoginCache()
	// init cache
	log.SetLevel(log.DebugLevel)
}

// index
func Index(ctx context.Context, c *app.RequestContext) {
	queryInfo := c.Query("info")
	//c.HTML(consts.StatusOK, "index.html", utils.H{"has_info": len(queryInfo) > 0, "info": queryInfo})
	c.HTML(consts.StatusOK, "new_index.html", utils.H{"has_info": len(queryInfo) > 0, "info": queryInfo})
}

//
func Login(ctx context.Context, c *app.RequestContext) {
	// get specific key
	if GetLoginInfoFromRequest(c) == nil {
		username := c.PostForm("username")
		password := c.PostForm("passwd")
		queryUser := model.User{}
		result := db.Where(&model.User{UserName: username, Password: password}).First(&queryUser)
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			log.Debugf("user not found exist")
			c.Redirect(consts.StatusNotFound, []byte(fmt.Sprintf("/index?info=%s", "用户不存在")))
			return
		}

		cookieStr := fmt.Sprintf("logincookie:uid=%d&username=%s&clientip=%s&logintime=%s", queryUser.ID, username, c.ClientIP(), time.Now().Format("2006-01-02 15:04:05"))
		LoginCachePtr.SetLoginUser(cookieStr, &queryUser)
		// set a cookie
		log.Debugf("There is no cookie named: %s, and make one...", COOKIE_KRY)
		cookie := protocol.AcquireCookie()
		cookie.SetKey(COOKIE_KRY)
		cookie.SetValue(cookieStr)
		cookie.SetExpire(time.Now().Add(3600 * time.Second))
		// TODO: 这里必须要设置根路径 这样才能把cookie带过来
		cookie.SetPath("/")
		cookie.SetHTTPOnly(true)
		cookie.SetSecure(false)
		c.Response.Header.SetCookie(cookie)
		protocol.ReleaseCookie(cookie)
		c.WriteString(fmt.Sprintf("username=%s login success", username))
		c.Redirect(consts.StatusOK, []byte(fmt.Sprintf("/docs?uid=%d", queryUser.ID)))
	} else {
		log.Debugf("cookie found=%s", string(c.Cookie(COOKIE_KRY)))
		if u := GetLoginInfoFromRequest(c); u != nil {
			c.Redirect(consts.StatusOK, []byte(fmt.Sprintf("/docs?uid=%d", u.ID)))
		}
	}
	return
}

// 退出登录
func QuitLogin(ctx context.Context, c *app.RequestContext) {
	DeleteCookieFromRequest(c)
	c.Redirect(consts.StatusOK, []byte(fmt.Sprintf("/index?info=%s", "请重新登录")))
}

func RegisterGet(ctx context.Context, c *app.RequestContext) {
	log.Debugf("vals=%v", c.Params)
	infoValue := c.Query("info")
	// 	infoValue := c.DefaultQuery("info", "")
	log.Debugf("info_val=%s hasInfo=%t", infoValue, len(infoValue) > 0)
	c.HTML(consts.StatusOK, "new_register.html", utils.H{"has_info": len(infoValue) > 0, "info": infoValue})
}

func RegisterPost(ctx context.Context, c *app.RequestContext) {
	username := string(c.PostForm("username"))
	passwd := string(c.PostForm("passwd"))
	passwd_again := string(c.PostForm("passwd_again"))

	if passwd != passwd_again { // 密码不一致
		c.Redirect(consts.StatusFound, []byte(fmt.Sprintf("/register?info=%s", "两次密码不一致")))
		return
	}

	query_user := model.User{}
	result := db.Where(&model.User{UserName: username}).First(&query_user) // 根据整型主键查找
	if !errors.Is(result.Error, gorm.ErrRecordNotFound) {
		log.Debugf("user already exist")
		c.Redirect(consts.StatusFound, []byte(fmt.Sprintf("/register?info=%s", "已经存在同名用户")))
		return
	}

	user := model.User{UserName: username, Password: passwd}
	// 插入校验
	inserResult := db.Create(&user)
	if errors.Is(inserResult.Error, grom.ErrInvalidDB) {
		log.Debugf("user insert failed")
		c.Redirect(consts.StatusFound, []byte(fmt.Sprintf("/register?info=%s", "DB 插入失败 ")))
		return
	} else {
		c.Redirect(consts.StatusFound, []byte("/index"))
		log.Debugf("user reg success")
	}
	return
}

func DocDetail(ctx context.Context, c *app.RequestContext) {
	logedUser := GetLoginInfoFromRequest(c)
	if logedUser == nil {
		c.Redirect(consts.StatusNotFound, []byte(fmt.Sprintf("/index?info=%s", "请登录")))
		return
	}

	doc_id, err := strconv.Atoi(c.Param("doc_id"))
	if err != nil {
		textMap := utils.H{
			"doc_title": "文章id不合法",
			"doc_text":  "请关闭页面",
			"image_url": IMAGE_URL_404,
			"doc_id":    "0",
			"user_name": logedUser.UserName,
			"user_id":   logedUser.ID,
		}
		c.HTML(consts.StatusNotFound, "doc.html", textMap)
	} else {
		var doc model.Doc
		// 查找不到咋整?
		result := db.First(&doc, doc_id) // 根据整型主键查找
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			textMap := utils.H{
				"doc_title": "文章不见了",
				"doc_text":  "您查看的文章不存在",
				"image_url": IMAGE_URL_404,
				"doc_id":    "0",
				"user_name": logedUser.UserName,
				"user_id":   logedUser.ID,
			}
			c.HTML(consts.StatusNotFound, "doc.html", textMap)
		} else {
			textMap := utils.H{
				"doc_title":      doc.Title,
				"doc_text":       doc.Text,
				"image_url":      doc.ImageUrl,
				"doc_id":         fmt.Sprintf("%d", doc.ID),
				"user_name":      logedUser.UserName,
				"user_id":        logedUser.ID,
				"doc_post_day":   doc.UpdatedAt.Day(),
				"doc_post_month": doc.UpdatedAt.Month().String(),
			}
			//c.HTML(consts.StatusOK, "doc.html", textMap)
			c.HTML(consts.StatusOK, "new_doc.html", textMap)
		}
	}
}

func NewDocGet(ctx context.Context, c *app.RequestContext) {
	logedUser := GetLoginInfoFromRequest(c)
	if logedUser == nil {
		c.Redirect(consts.StatusNotFound, []byte(fmt.Sprintf("/index?info=%s", "请登录")))
		return
	}

	c.HTML(consts.StatusOK, "new_postdoc.html", utils.H{"user_name": logedUser.UserName, "user_id": logedUser.ID})
}

func NewDocPost(ctx context.Context, c *app.RequestContext) {
	logedUser := GetLoginInfoFromRequest(c)
	if logedUser == nil {
		c.Redirect(consts.StatusNotFound, []byte(fmt.Sprintf("/index?info=%s", "请登录")))
		return
	}
	title := string(c.PostForm("title"))
	text := string(c.PostForm("doctext"))
	image_url := string(c.PostForm("image_url"))
	log.Debugf("title=%s, text=%s, image_url=%s\n", title, text, image_url)
	if len(title) > 0 && len(text) > 0 && len(image_url) > 0 {
		// 插入doc
		doc := model.Doc{Title: title, Text: text, ImageUrl: image_url, AuthorId: logedUser.ID, AuthorName: logedUser.UserName}
		// TODO: 添加插入错误校验
		db.Create(&doc)
		log.Debugf("insered doc id=%d", doc.ID)
		//db.Model(&model.Doc{}).Where(&model.Doc{Title: title, })
		// 重定向
		redirectUrl := fmt.Sprintf("/doc/%d", doc.ID)
		// 重定向到用户的插入页
		c.Redirect(consts.StatusFound, []byte(redirectUrl))
	} else {
		c.Redirect(consts.StatusFound, []byte("/index"))
	}
	return
}

func DocList(ctx context.Context, c *app.RequestContext) {
	logedUser := GetLoginInfoFromRequest(c)
	if logedUser == nil {
		c.Redirect(consts.StatusNotFound, []byte(fmt.Sprintf("/index?info=%s", "请登录")))
		return
	}
	//db.AutoMigrate(&model.Doc{})
	uidStr := c.Query("uid")
	log.Debugf("doclist uid=%s", uidStr)
	// 插入doc
	docs := make([]model.Doc, 0) //model.Doc{Title: title, Text: text, ImageUrl: image_url}
	// TODO: 添加插入错误校验
	db.Find(&docs).Limit(RETURN_DOC_LIMIT)
	log.Debugf("DocList %d docs found", len(docs))
	log.Debugf("logedUser.UserName=%s", logedUser.UserName)
	//c.HTML(consts.StatusOK, "docs_list.html", utils.H{"doc_list": docs, "user_name": logedUser.UserName, "user_id": logedUser.ID})
	c.HTML(consts.StatusOK, "new_docs_list.html", utils.H{"doc_list": docs, "user_name": logedUser.UserName, "user_id": logedUser.ID})

}

func UserProfile(ctx context.Context, c *app.RequestContext) {
	logedUser := GetLoginInfoFromRequest(c)
	if logedUser == nil {
		c.Redirect(consts.StatusNotFound, []byte(fmt.Sprintf("/index?info=%s", "请登录")))
		return
	}

	user_id, err := strconv.Atoi(c.Param("user_id"))
	if err != nil {
		c.HTML(consts.StatusNotFound, "user_profile.html", utils.H{"notfound": true})
	} else {
		var user model.User
		// 查找不到咋整?
		result := db.First(&user, user_id) // 根据整型主键查找
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			c.HTML(consts.StatusNotFound, "user_profile.html", utils.H{"notfound": true})
		} else {
			resultMap := utils.H{
				"notfound":         false,
				"user_id":          user.ID,
				"user_name":        user.UserName,
				"user_reg_time":    user.CreatedAt.String(),
				"avetar_image_url": "https://img-blog.csdnimg.cn/img_convert/5bd0b8e7f91ffea81dbbb30a6080199d.png",
			}
			c.HTML(consts.StatusOK, "new_user_profile.html", resultMap)
		}
	}
}
